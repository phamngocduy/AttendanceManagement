@model List<AttendanceManagement.Models.DasboardAttendanceView>
@{
	int iSession = 1;
}

@if (Model.Count > 0)
{
	<div class="card card-outline-primary">
		<div class="card-header"><h3 style="color:white"><strong> TOTAL ATTENDANCE</strong></h3></div>
		<div class="card-body">
			<div class="col-lg-12 col-xlg-12 col-md-7">
				<div class="user-analytics chartist-chart" style="height: 250px;"></div>
			</div>
			<br />
			<br />
			<div class="row pull-left">
				<div class="col">
					<button type="button" class="btn waves-effect waves-light btn-block btn-success" onclick="location.href = '@Url.Action("Import", "Attendance")';">Import Excel</button>
				</div>
				<div class="col">
					<button type="button" class="btn btn-info waves-effect waves-dark" onclick="location.href = '@Url.Action("Export", "Attendance")';">Export Excel</button>
				</div>
			</div>
			<div class="row pull-right">
				<div class="bt-switch">
					<input type="checkbox" checked data-on-color="danger" data-off-color="success" data-on-text="Status" data-off-text="Point">
				</div>
			</div>
			<div class="table-responsive m-t-40">
				<table id="allAttendance" class="display nowrap table table-hover table-striped table-bordered" style="width:100%;margin:0px;">
					<thead>
						<tr>
							<th>MSSV</th>
							<th>Full Name</th>
							<th>Attend</th>
							<th>Point</th>
							@for (int i = 0; i < 1; i++)
							{
								var model = Model[i];
								foreach (var item in model.Attendance)
								{
									<th data-toggle="tooltip" data-placement="top" title="@item.Date.ToShortDateString()">Sesion @(iSession++)</th>
								}
							}
						</tr>

					</thead>
					<tfoot>
						<tr>
							<th>MSSV</th>
							<th>Full Name</th>
							<th>Attend</th>
							<th>Point</th>
							@for (int i = 0; i < 1; i++)
							{
								var model = Model[i];
								foreach (var item in model.Attendance)
								{
									<th>@item.Date.ToShortDateString()</th>
								}
							}
						</tr>
					</tfoot>
					<tbody>
						@foreach (var item in Model)
						{
							<tr>
								<td>@item.studentID</td>
								<td style="text-align:left">@item.LastName @item.FirstName </td>
								<td style="width:50px">@item.TotalPresent/@item.TotalSession</td>
								<td style="width:40px">@item.TotalPoint</td>
								@foreach (var i in item.Attendance)
								{
									<td>
										<div class="Spoint" style="display:none">
											@i.Status
										</div>
										<div class="status">
											@if (i.Status == "0")
											{
												if (i.Note != null)
												{
													<img data-toggle="tooltip" data-placement="top" title="@i.Note" src="~/Content/image/uncheck.png" style="width:20px;height:20px" />
												}
												else
												{
													<img src="~/Content/image/uncheck.png" style="width:20px;height:20px" />
												}
											}
											else if (i.Status != null)
											{
												if (i.Note != null)
												{
													<img data-toggle="tooltip" data-placement="top" title="@i.Note" src="~/Content/image/check.png" style="width:20px;height:20px" />
												}
												else
												{
													<img src="~/Content/image/check.png" style="width:20px;height:20px" />
												}
											}
										</div>
									</td>
								}
							</tr>
						}

					</tbody>
				</table>
			</div>
		</div>
	</div>


	<script src="~/Content/assets/jquery.min.js"></script>
	<script type="text/javascript">
		$(document).ready(function () {
			var table = $('#allAttendance').DataTable({
				ordering: false,
				scrollY: "500px",
				scrollX: "100%",
				scrollCollapse: true,
				paging: false,
				autoWidth: true,
				fixedColumns: {
					leftColumns: 4
				}
				,
				columnDefs: [
					{ "className": "dt-center", "targets": "_all" }
				],

			});
			var widths = [61.6, 220.8, 46.4, 36.8];
			$('.DTFC_LeftHeadWrapper thead th').each(
				function (i, val) {
					$(this).css('width', widths[i]);
				});
		});
	</script>
	<script src="~/Content/assets/bootstrap-switch.min.js"></script>
	<script type="text/javascript">
		$(".bt-switch input[type='checkbox']").bootstrapSwitch({
			onSwitchChange: function (e, state) {
				if (state == false) {
					$('div.Spoint').show();
					$('div.status').hide();
				} else {

					$('div.Spoint').hide();
					$('div.status').show();
				}
			}
		});
	</script>

	<script>
		$(document).ready(function () {
			$.ajax({
				type: "GET",
				url: "/AttendanceManagement/Attendance/GetAttendanceData",
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				success: function (res) {
					var label = [];
					var data = []
					$.each(res, function (index, value) {
						label.push("S" + (index+1));
						data.push(value);
					});
					$(function () {
						"use strict";
						var chart = new Chartist.Line('.user-analytics', {
							labels: label
							, series: [data]
						}, {
								high: 125
								, low: 0
								, showArea: true
								, lineSmooth: Chartist.Interpolation.simple({
									divisor: 10
								})
								, fullWidth: true
								, plugins: [
									Chartist.plugins.tooltip()
								], // As this is axis specific we need to tell Chartist to use whole numbers only on the concerned axis
								axisY: {
									onlyInteger: true
									, offset: 20
									, labelInterpolationFnc: function (value) {
										return value;
									}
								}
							});

						chart.on('draw', function (ctx) {
							if (ctx.type === 'area') {
								ctx.element.attr({
									x1: ctx.x1 + 0.001
								});
							}
						});

						// Create the gradient definition on created event (always after chart re-render)
						chart.on('created', function (ctx) {
							var defs = ctx.svg.elem('defs');
							defs.elem('linearGradient', {
								id: 'gradient',
								x1: 0,
								y1: 1,
								x2: 0,
								y2: 0
							}).elem('stop', {
								offset: 0,
								'stop-color': 'rgba(255, 255, 255, 1)'
							}).parent().elem('stop', {
								offset: 1,
								'stop-color': 'rgba(38, 198, 218, 1)'
							});
						});
						// ==============================================================
						// This is for the animation
						// ==============================================================
						chart.on('draw', function (data) {
							if (data.type === 'line' || data.type === 'area') {
								data.element.animate({
									d: {
										begin: 500 * data.index,
										dur: 500,
										from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
										to: data.path.clone().stringify(),
										easing: Chartist.Svg.Easing.easeInOutElastic
									}
								});
							}
							if (data.type === 'bar') {
								data.element.animate({
									y2: {
										dur: 500,
										from: data.y1,
										to: data.y2,
										easing: Chartist.Svg.Easing.easeInOutElastic
									},
									opacity: {
										dur: 500,
										from: 0,
										to: 1,
										easing: Chartist.Svg.Easing.easeInOutElastic
									}
								});
							}
						});
					});
				}	
			});

		
		});
		

	</script>

}
