@using WebApplication.Models
@model WebApplication.Models.Group

@section head{
	@Styles.Render("~/Content/Site.css")
	@Styles.Render("~/Content/Tree.css")
}

@section scripts{
	@Scripts.Render("~/Scripts/tree.js")
}

@{
	ViewBag.Title = "Create Group";
	Layout = "~/Views/Shared/_Layout.cshtml";

	var parentID = (int)ViewBag.ParentID;
	var parentName = (string)ViewBag.ParentName;
	var grouptype = (bool)ViewBag.GroupType;

}


@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
	<div class="panel panel-primary">
		<div class="panel-heading panel-head">My Group</div>
		<div id="frm-author" class="panel-body">
			<div class="modal-header">
				<h3 class="modal-title">Create new group</h3>
			</div>
			<div class="modal-body">
				<div class="form-horizontal">
					@Html.ValidationSummary(true, "", new { @class = "text-danger" })
					<div class="form-group">
						@Html.LabelFor(model => model.GroupName, htmlAttributes: new { @class = "control-label col-md-2" })
						<div class="col-lg-4">
							@Html.EditorFor(model => model.GroupName, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.GroupName, "", new { @class = "text-danger" })
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(model => model.GroupDescription, htmlAttributes: new { @class = "control-label col-md-2" })
						<div class="col-lg-4">
							@Html.TextAreaFor(model => model.GroupDescription, new { htmlAttributes = new { @class = "form-control" } })
							@Html.ValidationMessageFor(model => model.GroupDescription, "", new { @class = "text-danger" })
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(model => model.GroupType, htmlAttributes: new { @class = "control-label col-md-2" })
						<div class="col-lg-4">
							@Html.DropDownListFor(model => model.GroupType, new List<SelectListItem>() { new SelectListItem { Text = "Public", Value = "true", Selected = ViewBag.GroupType }, new SelectListItem { Text = "Private", Value = "false", Selected = ViewBag.GroupType } }, new { disabled = "disabled" })
							@Html.ValidationMessageFor(model => model.GroupType, "", new { @class = "text-danger" })
						</div>
					</div>

					<div class="form-group">
						@Html.LabelFor(model => model.GroupParent, htmlAttributes: new { @class = "control-label col-md-2" })
						<div class="col-lg-4">
							@Html.TextBox("GroupParent", parentName, new { @class = "form-control required", @disabled = "disabled" })
							@Html.ValidationMessageFor(model => model.GroupParent, "", new { @class = "text-danger" })
						</div>
					</div>
				</div>
				@Html.HiddenFor(m => m.GroupParent, new { Value = parentID })
				@Html.HiddenFor(m => m.GroupType, new { Value = grouptype })
			</div>
			<div class="modal-footer">
				<input type="submit" value="Create" class="btn btn-success" />
				@Html.ActionLink("Back", "Index", null, new { @class = "btn btn-danger" })
			</div>
		</div>
	</div>
}
